#!/usr/bin/env python3
from concurrent.futures import ThreadPoolExecutor
import socket
import struct
import sys

# connection constants
HOST = '127.0.0.1'
PORT = 54901

# check that the file ends with .txt
def check_text_file(fname):

    return fname.endswith(".txt")

def send_line(server_socket, identifier, file_path):
    # send client type letter to server
    server_socket.send(identifier.encode())

    # read file line by line
    with open(file_path, 'r') as file:
    
        for line in file:
            # encode in bytes the line 
            line = line.strip()
            line_bytes = line.encode()
        
            # pack line length
            line_len_bytes = struct.pack('!I', len(line_bytes))
            # send line length as bytes
            server_socket.send(line_len_bytes)
            # send the line
            server_socket.send(line_bytes)

    # close socket when file is completely read and lines sent to the server
    server_socket.close()

if __name__ == '__main__':

    # wrong number of parameters, at least 2 are needed
    if (len(sys.argv) < 2):
        sys.exit(1)

    files = sys.argv[1:]
    
    # create a thread for each input file
    with ThreadPoolExecutor() as executor:
        for filename in files:
            # check that the file extension is correct
            if (check_text_file(filename)):
                client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                # Connect to server
                client_socket.connect((HOST, PORT))
                # send file lines from client B to server using a thread for each file
                executor.submit(send_line, client_socket, 'B', filename)

    